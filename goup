#!/usr/bin/env sh

ProgName=$(basename $0)

cmd_help(){
  echo "SYNOPSIS: $ProgName <subcommand> [options]\n"
  echo "COMMANDS:"
  echo "    init              Configure the shell environment for $ProgName"
  echo "    update [version]  Version of Go to install (e.g. \"1.15.2\"). If empty, use the latest version"
  echo "    show              Show the current version of Go"
  echo ""
  echo "NOTES:"
  echo "    $ProgName requires a version of Go to function. You can install Go with a package manager."
  echo "    For example, brew install go or apt-get install go."
  echo ""
  echo "    $ProgName downloads specified version of Go using go get golang.org/dl/<version>, and symlinks"
  echo "    the version to $HOME/sdk/current. $ProgName init exports $HOME/sdk/current/bin to PATH."
  echo ""
}

cmd_init(){
  if [ "$1" == "-" ]; then
    echo 'export PATH="$HOME/sdk/current/bin:$PATH"'
    exit 0
  fi

  echo "# Load $ProgName automatically by appending the"
  echo "# following to your shell startup script:"
  echo ""
  echo "eval \"\$($ProgName init -)\""
}

cmd_update(){
  local ver="${1}"
  if [ -z "${ver}" ]; then
    ver=$(curl -s 'https://golang.org/VERSION?m=text')
  fi

  # add go prefix, e.g., go1.15.2
  if [[ "${ver}" != go* ]]; then
    ver="go${ver}"
  fi

  local gbd="$HOME/sdk/${ver}/bin"
  if [ ! -d "${gbd}" ]; then
    echo "Downloading ${ver}..."
    go get golang.org/dl/${ver} || exit $?
    ${ver} download || exit $?
  fi

  rm -f "$HOME/sdk/current" 
  ln -s "$HOME/sdk/${ver}" "$HOME/sdk/current"
  echo "Activated ${ver}"
}

cmd_show(){
  local path="$(readlink -f $HOME/sdk/current)"
  local prefix="$HOME/sdk/"
  echo ${path#$prefix}
}

subcommand=$1
case $subcommand in
  "" | "-h" | "--help")
    cmd_help
    ;;
  *)
    shift
    cmd_${subcommand} $@
    if [ $? = 127 ]; then
      echo "Error: '$subcommand' is not a known subcommand." >&2
      echo "Run '$ProgName --help' for a list of known subcommands." >&2
      exit 1
    fi
    ;;
esac
